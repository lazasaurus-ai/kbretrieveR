% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kb_client.R
\docType{class}
\name{KBClient}
\alias{KBClient}
\title{KBClient: R6 client for Bedrock KB + chat integration}
\format{
An \code{R6Class} generator object.
}
\description{
KBClient: R6 client for Bedrock KB + chat integration

KBClient: R6 client for Bedrock KB + chat integration
}
\details{
Lightweight R6 client that wraps \code{kb_retrieve_httr()} to fetch context from an
AWS Bedrock Knowledge Base and then calls a configurable chat client (e.g.,
an \code{ellmer::chat_aws_bedrock()} object or any \verb{function(prompt) -> character}).
It stores convenient defaults (kb_id, region, chat client, and prompt limits),
so you can call \verb{$retrieve()} and \verb{$chat()} without repeating parameters.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{kb_id}}{Knowledge Base ID (character). May be \code{NULL}; falls back to \code{Sys.getenv("AWS_KB_ID")}.}

\item{\code{region}}{AWS region (character or \code{NULL}). If \code{NULL}, retrieval resolves region internally.}

\item{\code{chat_client}}{A chat client (e.g., from \code{ellmer}) or a function \verb{function(prompt) -> character}.}

\item{\code{default_number_of_results}}{Default number of KB results to retrieve (integer, default \code{5}).}

\item{\code{default_max_snippets}}{Default number of snippets injected into the LLM prompt (integer, default \code{5}).}

\item{\code{default_snippet_chars}}{Maximum characters per snippet (integer, default \code{1500}).}

\item{\code{include_metadata}}{Logical; include basic metadata when building prompts (default \code{TRUE}).}

\item{\code{verbose}}{Logical; print progress messages (default \code{TRUE}).
Initialize a KBClient}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KBClient-new}{\code{KBClient$new()}}
\item \href{#method-KBClient-retrieve}{\code{KBClient$retrieve()}}
\item \href{#method-KBClient-chat}{\code{KBClient$chat()}}
\item \href{#method-KBClient-inspect}{\code{KBClient$inspect()}}
\item \href{#method-KBClient-set_chat_client}{\code{KBClient$set_chat_client()}}
\item \href{#method-KBClient-format_citation}{\code{KBClient$format_citation()}}
\item \href{#method-KBClient-as_list}{\code{KBClient$as_list()}}
\item \href{#method-KBClient-clone}{\code{KBClient$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-new}{}}}
\subsection{Method \code{new()}}{
Constructor for the KBClient. Stores defaults for future calls to
\verb{$retrieve()} and \verb{$chat()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$new(
  kb_id = NULL,
  region = NULL,
  chat_client = NULL,
  default_number_of_results = 5,
  default_max_snippets = 5,
  default_snippet_chars = 1500,
  include_metadata = TRUE,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{kb_id}}{KB ID (character) or \code{NULL} to use \code{Sys.getenv("AWS_KB_ID")}.}

\item{\code{region}}{AWS region (character) or \code{NULL} to let retrieval resolve it.}

\item{\code{chat_client}}{Chat client (e.g. \code{ellmer::chat_aws_bedrock(...)}), or a function \verb{function(prompt) -> character}.}

\item{\code{default_number_of_results}}{Default KB retrieve size (integer, default \code{5}).}

\item{\code{default_max_snippets}}{Default number of snippets to inject into prompt (integer, default \code{5}).}

\item{\code{default_snippet_chars}}{Default maximum characters per snippet (integer, default \code{1500}).}

\item{\code{include_metadata}}{Logical; include metadata when building prompts (default \code{TRUE}).}

\item{\code{verbose}}{Logical; print progress messages (default \code{TRUE}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{KBClient} object.
Retrieve KB context (snippets) for a question
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-retrieve"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-retrieve}{}}}
\subsection{Method \code{retrieve()}}{
Calls Bedrock KB \verb{/retrieve} and returns a tibble of snippets (or a raw list
when \code{return_raw = TRUE}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$retrieve(
  question,
  number_of_results = NULL,
  return_raw = FALSE,
  verbose = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{question}}{User question (character, non-empty).}

\item{\code{number_of_results}}{Integer override for KB retrieval size. If \code{NULL},
uses \code{self$default_number_of_results}.}

\item{\code{return_raw}}{Logical; if \code{TRUE}, returns a list with \code{parsed}, \code{raw_text},
and \code{raw_parsed} from the API response.}

\item{\code{verbose}}{Logical override; if \code{NULL}, uses \code{self$verbose}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A tibble with columns like \code{score}, \code{uri}, \code{text}, and metadata;
or a list when \code{return_raw = TRUE}.
Chat using KB context
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-chat"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-chat}{}}}
\subsection{Method \code{chat()}}{
Retrieves KB context for the question, builds a prompt (via \code{kb_chat_with_ellmer()}),
and returns the assistant text (or a debug list). When \code{append_sources = TRUE},
a \strong{Sources} section is appended to the reply with the URIs (and chunk ids)
of the snippets included.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$chat(
  question,
  kb_id = NULL,
  chat_client = NULL,
  number_of_results = NULL,
  max_snippets = NULL,
  snippet_chars = NULL,
  append_sources = FALSE,
  return_raw = FALSE,
  verbose = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{question}}{User question (character, non-empty).}

\item{\code{kb_id}}{Optional KB ID override (character). If \code{NULL}, uses client field or env var.}

\item{\code{chat_client}}{Optional one-off chat client; if \code{NULL}, uses \code{self$chat_client}.}

\item{\code{number_of_results}}{Optional integer override for KB retrieval size. If \code{NULL}, uses client default.}

\item{\code{max_snippets}}{Integer; number of top snippets to inject into the LLM prompt. Defaults to client setting.}

\item{\code{snippet_chars}}{Integer; maximum characters per snippet. Defaults to client setting.}

\item{\code{append_sources}}{Logical; when \code{TRUE}, append a \strong{Sources} section to the reply (default \code{FALSE}).}

\item{\code{return_raw}}{Logical; if \code{TRUE}, returns a list with \code{response}, \code{parsed_kb},
\code{raw_parsed}, and \code{prompt}.}

\item{\code{verbose}}{Logical override; if \code{NULL}, uses \code{self$verbose}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character assistant reply, or a list when \code{return_raw = TRUE}.
Inspect raw parsed retrieval results
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-inspect"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-inspect}{}}}
\subsection{Method \code{inspect()}}{
Convenience method that pretty-prints a compact summary of the KB retrieval
(using \code{inspect_kb()}) and invisibly returns the raw retrieval list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$inspect(
  question,
  number_of_results = NULL,
  max_chars = 160,
  verbose = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{question}}{User question (character).}

\item{\code{number_of_results}}{Optional integer override for KB retrieval size.}

\item{\code{max_chars}}{Integer; maximum characters to show per snippet preview (default \code{160}).}

\item{\code{verbose}}{Logical override; if \code{NULL}, uses \code{self$verbose}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns the raw retrieval list (when available).
Set or replace the chat client
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-set_chat_client"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-set_chat_client}{}}}
\subsection{Method \code{set_chat_client()}}{
Replaces \code{self$chat_client} with \code{client}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$set_chat_client(client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{A chat client (e.g. from \code{ellmer}) or a function \verb{function(prompt) -> character}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
Format a single parsed row into a citation string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-format_citation"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-format_citation}{}}}
\subsection{Method \code{format_citation()}}{
Creates a short citation string for a single parsed row (1-row tibble/named list),
optionally as a markdown link.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$format_citation(row, markdown = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{row}}{A 1-row tibble or a named list with fields like \code{source_uri}, \code{uri}, and \code{chunk_id}.}

\item{\code{markdown}}{Logical; when \code{TRUE} (default) return a markdown link; otherwise plain text.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character string (citation) or \code{NA_character_} if not enough info.
Return internals as a list (for debugging)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-as_list"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-as_list}{}}}
\subsection{Method \code{as_list()}}{
Returns a list snapshot of key client internals and defaults.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$as_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A named list with \code{kb_id}, \code{region}, \code{chat_client}, and a \code{defaults} sub-list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KBClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KBClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KBClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
